library(tools)
setwd("C:/Users/jlthomps/Desktop/git/usgs-r/src/contrib")
write_PACKAGES(verbose=TRUE, subdirs=TRUE, type="source")
setwd("C:/Users/jlthomps/Desktop/git/usgs-r/bin/windows/contrib/3.0")
write_PACKAGES(verbose=TRUE, subdirs=TRUE, type="win.binary")
install.packages("EflowStats",repos="http://usgs-r.github.com",type="source")
library(EflowStats)
# calculate stats for a USGS streamgage
sites <- c("02177000","02178400")
startdate <- "2009"
enddate <- "2013"
stats="magnifSeven,magStat,flowStat,durStat,timStat,rateStat,otherStat"
statsout <- ObservedStatsUSGS(sites,startdate,enddate,stats)
# calculate stats for data from your own data file
drain_area=54
site_id="Test site"
daily_data<-dailyData
stats="magnifSeven,magStat,flowStat,durStat,timStat,rateStat,otherStat"
statsout <- ObservedStatsOther(daily_data,drain_area,site_id,stats)
install.packages(c("EflowStats","NWCCompare"),repos="http://usgs-r.github.com",type="source")
install.packages(c("EflowStats", "NWCCompare"), repos = "http://usgs-r.github.com",
)
install.packages(c("EflowStats","NWCCompare"),repos="http://usgs-r.github.com",type="source")
library(EflowStats)
library(NWCCompare)
# Run stats and differences on USGS observed and modeled daily discharge data
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat"
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
diffInputsv <- diffInputs(stats, model_url)
startdate <- diffInputsv[[1]]
enddate <- diffInputsv[[2]]
x_urls <- diffInputsv[[3]]
d_urls <- diffInputsv[[4]]
m_urls <- diffInputsv[[5]]
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
# Run stats on modeled huc12s
sites<-"031401020800"
startdate <- "2008-10-01"
enddate <- "2010-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat"
sos<-"http://cida-eros-wsqa.er.usgs.gov:8081/thredds/sos/watersmart/HUC12_data/HUC12_Q.nc"
observedProperty="MEAN_streamflow"
wfsUrl<-'http://cida-eros-wsdev.er.usgs.gov:8081/geoserver/NWC/ows'
wfsTypename='NWC:huc12_SE_Basins_v2'
wfsFilterProperty='NWC:HUC12'
wfsAreaPropertyname='NWC:mi2'
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
urls<-paste(sos,'?request=GetObservation&service=SOS&version=1.0.0&observedProperty=',observedProperty,'&offering=',sites,sep="")
statsout <- calculateStatsGroups(stats, sites, startdate, enddate, SWE_CSV_IHA, urls, getWFSFieldAsNumeric, drain_args=list(wfs_url=wfsUrl, wfsTypename=wfsTypename, wfsProperty=wfsFilterProperty, wfsPropertyname=wfsAreaPropertyname), drain_site_param='wfsLiteral')
# Run stats on USGS observed daily discharge data
sites <- '02177000,02178400'
startdate <- "2008-10-01"
enddate <- "2013-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat"
nwisDvUrl <- "http://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites="
offering <- "00003"
property <- "00060"
drainage_url <- "http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
x_urls<-paste(nwisDvUrl, sites, "&startDT=", startdate, "&endDT=", enddate, "&statCd=", offering, "&parameterCd=", property, sep = "")
d_urls<-paste(drainage_url, sites, sep = "")
statsout <- calculateStatsGroups(stats, sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getSupportedStatNames.R', echo=TRUE)
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
diffInputsv <- diffInputs(stats, model_url)
startdate <- diffInputsv[[1]]
enddate <- diffInputsv[[2]]
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/diffInputs.R', echo=TRUE)
diffInputsv <- diffInputs(model_url)
startdate <- diffInputsv[[1]]
enddate <- diffInputsv[[2]]
x_urls <- diffInputsv[[3]]
d_urls <- diffInputsv[[4]]
m_urls <- diffInputsv[[5]]
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
X_DATA_FUN<-getSMLWML1.1Data
X_DATA_FUN<-getXMLWML1.1Data
x_args<-x_urls
DRAIN_AREA_FUN<-getDrainageArea
drain_args<-d_urls
M_DATA_FUN<-SWE_CSV_IHA
m_args<-m_urls
supportedStats=getSupportedStatNames()
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
sites
i<-1
site = sites[i]
m_data <- M_DATA_FUN(m_args[i])
startdate<-min(m_data$date)
enddate<-max(m_data$date)
interval<-''
latest<-''
x_data <- X_DATA_FUN(x_args[i])
obs_data <- get_obsdata(x_data)
obs_count<-nrow(x_data)
cat(paste("get_obsdata run on x_obs for site",site,obs_count,"\n",sep=" "))
m_data$date <- as.Date(m_data$date,format="%Y-%m-%d")
m_data<-m_data[m_data$date>=min(x_data$date) & m_data$date<=max(x_data$date), ]
drain_area<-DRAIN_AREA_FUN(drain_args[i])
cat(paste("data and drainage area retrieved for site",site,drain_area,"\n",sep=" "))
mod_data <- get_obsdata(m_data)
mod_count <- nrow(mod_data)
cat(paste("get_obsdata run on x_mod for site",site,mod_count,"\n",sep=" "))
countbyyr<-aggregate(obs_data$discharge, list(obs_data$wy_val), length)
countbyyr_mod<-aggregate(mod_data$discharge, list(mod_data$wy_val), length)
colnames(countbyyr)<-c('wy','num_samples')
colnames(countbyyr_mod)<-c('wy','num_samples')
sub_countbyyr<-subset(countbyyr,num_samples >= 365)
sub_countbyyr_mod<-subset(countbyyr_mod,num_samples >= 365)
include_yrs<-merge(sub_countbyyr,sub_countbyyr_mod)
obs_data<-merge(obs_data,include_yrs,by.x="wy_val",by.y="wy")
mod_data<-merge(mod_data,include_yrs,by.x="wy_val",by.y="wy")
obs_data<-obs_data[order(obs_data$jul_val),]
mod_data<-mod_data[order(mod_data$jul_val),]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("data sets merged for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$min_date[i] <- as.character(min(obs_data$date))
tempArrays$max_date[i] <- as.character(max(obs_data$date))
tempArrays$comment[i] <- ""
cat(paste("dates calculated for site",site,"\n",sep=" "))
obs_data <- obs_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
mod_data <- mod_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("dfs created for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
t <- FlowStatsICP(obs_data,drain_area)
str(t)
legnth(supportedStats$namescompareStatObs)
length(supportedStats$namescompareStatObs)
supportedStats=getSupportedStatNames()
length(supportedStats$namescompareStatObs)
supportedStats
length(supportedStats$namescompareStatObs
)
supportedStats$namescompareStatObs
length(supportedStats$namesCompareStatObs)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/FlowStats_ICP.R', echo=TRUE)
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
t <- FlowStatsICP(obs_data,drain_area)
str(t)
otherstat <- OtherStatsICP(data)
otherstat <- OtherStatsICP(obs_data)
str(other_stat)
str(otherstat)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/OtherStatsICP.r', echo=TRUE)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/FlowStats_ICP.R', echo=TRUE)
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
diffInputsv <- diffInputs(model_url)
startdate <- diffInputsv[[1]]
enddate <- diffInputsv[[2]]
x_urls <- diffInputsv[[3]]
d_urls <- diffInputsv[[4]]
m_urls <- diffInputsv[[5]]
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
supportedStats=getSupportedStatNames()
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
site = sites[i]
m_data <- M_DATA_FUN(m_args[i])
startdate<-min(m_data$date)
enddate<-max(m_data$date)
interval<-''
latest<-''
x_data <- X_DATA_FUN(x_args[i])
obs_data <- get_obsdata(x_data)
obs_count<-nrow(x_data)
cat(paste("get_obsdata run on x_obs for site",site,obs_count,"\n",sep=" "))
m_data$date <- as.Date(m_data$date,format="%Y-%m-%d")
m_data<-m_data[m_data$date>=min(x_data$date) & m_data$date<=max(x_data$date), ]
drain_area<-DRAIN_AREA_FUN(drain_args[i])
cat(paste("data and drainage area retrieved for site",site,drain_area,"\n",sep=" "))
mod_data <- get_obsdata(m_data)
mod_count <- nrow(mod_data)
cat(paste("get_obsdata run on x_mod for site",site,mod_count,"\n",sep=" "))
countbyyr<-aggregate(obs_data$discharge, list(obs_data$wy_val), length)
countbyyr_mod<-aggregate(mod_data$discharge, list(mod_data$wy_val), length)
colnames(countbyyr)<-c('wy','num_samples')
colnames(countbyyr_mod)<-c('wy','num_samples')
sub_countbyyr<-subset(countbyyr,num_samples >= 365)
sub_countbyyr_mod<-subset(countbyyr_mod,num_samples >= 365)
include_yrs<-merge(sub_countbyyr,sub_countbyyr_mod)
obs_data<-merge(obs_data,include_yrs,by.x="wy_val",by.y="wy")
mod_data<-merge(mod_data,include_yrs,by.x="wy_val",by.y="wy")
obs_data<-obs_data[order(obs_data$jul_val),]
mod_data<-mod_data[order(mod_data$jul_val),]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("data sets merged for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$min_date[i] <- as.character(min(obs_data$date))
tempArrays$max_date[i] <- as.character(max(obs_data$date))
tempArrays$comment[i] <- ""
cat(paste("dates calculated for site",site,"\n",sep=" "))
obs_data <- obs_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
mod_data <- mod_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("dfs created for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
tempArrays$ModStats[i, ] <- FlowStatsICP(mod_data,drain_area)
tempArrays$DiffStats[i, ] <- (tempArrays$ModStats[i, ]-tempArrays$ObsStats[i, ])/tempArrays$ObsStats[i, ]
cat("diffs calculated \n")
tempArrays$GoFStats[i, ] <- SiteGoF(obs_data, mod_data)
statsout<-nameStatsArray("GoF", sites, tempArrays)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/inst/exampleScript.R', echo=TRUE)
install.packages(c("zoo", "chron", "doBy", "XML", "hydroGOF",
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/calculateStatsDiffs.R', echo=TRUE)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/FlowStats_ICP.R', echo=TRUE)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/OtherStatsICP.r', echo=TRUE)
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
diffInputsv <- diffInputs(model_url)
startdate <- diffInputsv[[1]]
enddate <- diffInputsv[[2]]
x_urls <- diffInputsv[[3]]
d_urls <- diffInputsv[[4]]
m_urls <- diffInputsv[[5]]
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
supportedStats=getSupportedStatNames()
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
for (i in 1:length(sites)) {
site = sites[i]
m_data <- M_DATA_FUN(m_args[i])
if (nrow(m_data)>2) {
startdate<-min(m_data$date)
enddate<-max(m_data$date)
interval<-''
latest<-''
x_data <- X_DATA_FUN(x_args[i])
if (nrow(x_data)>2) {
obs_data <- get_obsdata(x_data)
obs_count<-nrow(x_data)
cat(paste("get_obsdata run on x_obs for site",site,obs_count,"\n",sep=" "))
m_data$date <- as.Date(m_data$date,format="%Y-%m-%d")
m_data<-m_data[m_data$date>=min(x_data$date) & m_data$date<=max(x_data$date), ]
drain_area<-DRAIN_AREA_FUN(drain_args[i])
cat(paste("data and drainage area retrieved for site",site,drain_area,"\n",sep=" "))
mod_data <- get_obsdata(m_data)
mod_count <- nrow(mod_data)
cat(paste("get_obsdata run on x_mod for site",site,mod_count,"\n",sep=" "))
countbyyr<-aggregate(obs_data$discharge, list(obs_data$wy_val), length)
countbyyr_mod<-aggregate(mod_data$discharge, list(mod_data$wy_val), length)
colnames(countbyyr)<-c('wy','num_samples')
colnames(countbyyr_mod)<-c('wy','num_samples')
sub_countbyyr<-subset(countbyyr,num_samples >= 365)
sub_countbyyr_mod<-subset(countbyyr_mod,num_samples >= 365)
include_yrs<-merge(sub_countbyyr,sub_countbyyr_mod)
if (nrow(include_yrs)==0) {
tempArrays$comment[i]<-"No matching complete water years for site"
} else {
obs_data<-merge(obs_data,include_yrs,by.x="wy_val",by.y="wy")
mod_data<-merge(mod_data,include_yrs,by.x="wy_val",by.y="wy")
obs_data<-obs_data[order(obs_data$jul_val),]
mod_data<-mod_data[order(mod_data$jul_val),]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
if (length(mod_data$discharge)<3) {
tempArrays$comment[i]<-"No matching complete water years for site"
} else {
if (length(mod_data$discharge)!=length(obs_data$discharge)) {
tempArrays$comment[i]<-"Observed and modeled time-series don't match for site"
} else {
cat(paste("data sets merged for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$min_date[i] <- as.character(min(obs_data$date))
tempArrays$max_date[i] <- as.character(max(obs_data$date))
tempArrays$comment[i] <- ""
cat(paste("dates calculated for site",site,"\n",sep=" "))
obs_data <- obs_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
mod_data <- mod_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("dfs created for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
tempArrays$ModStats[i, ] <- FlowStatsICP(mod_data,drain_area)
tempArrays$DiffStats[i, ] <- (tempArrays$ModStats[i, ]-tempArrays$ObsStats[i, ])/tempArrays$ObsStats[i, ]
cat("diffs calculated \n")
tempArrays$GoFStats[i, ] <- SiteGoF(obs_data, mod_data)
}
}}
} else {
tempArrays$comment[i]<-"No observed data for this site"
}
} else {
tempArrays$comment[i]<-"No modeled data for site"
}
}
statsout<-nameStatsArray("GoF", sites, tempArrays)
sites <- '02177000,02178400'
startdate <- "2008-10-01"
enddate <- "2013-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat,otherStat"
nwisDvUrl <- "http://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites="
offering <- "00003"
property <- "00060"
drainage_url <- "http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
x_urls<-paste(nwisDvUrl, sites, "&startDT=", startdate, "&endDT=", enddate, "&statCd=", offering, "&parameterCd=", property, sep = "")
d_urls<-paste(drainage_url, sites, sep = "")
statsout <- calculateStatsGroups(stats, sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls)
supportedStats=getSupportedStatNames()
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
site = sites[i]
x_data <- X_DATA_FUN(x_args[i])
drain_area<-DRAIN_AREA_FUN(drain_args[i])
flow_data <- get_obsdata(x_data)
countbyyr<-aggregate(flow_data$discharge, list(flow_data$wy_val), length)
colnames(countbyyr)<-c('wy','num_samples')
sub_countbyyr<-subset(countbyyr,num_samples >= 365)
flow_data<-merge(flow_data,sub_countbyyr,by.x="wy_val",by.y="wy")
flow_data<-flow_data[order(flow_data$jul_val),]
tempArrays$min_date[i] <- as.character(min(flow_data$date))
tempArrays$max_date[i] <- as.character(max(flow_data$date))
flow_data <- flow_data[, c("wy_val", "date", "discharge", "month_val", "year_val", "day_val", "jul_val")]
tempArrays$ObsFlowStats[i, ] <- FlowStatsAll(flow_data, drain_area, stats=stats)
tempArrays$magnifSevenObs[i, ] <- magnifSeven(flow_data)
tempArrays$comment <- ""
statsout<-nameStatsArray(stats, sites, tempArrays)
stats
supportedStats=getSupportedStatNames()
statsout <- data.frame(t(sites),tempArrays$min_date, tempArrays$max_date, tempArrays$magnifSevenObs, tempArrays$ObsFlowStats, tempArrays$comment, stringsAsFactors = FALSE)
namesFull <- c("site_no", "min_date", "max_date")
if (grepl("magnifSeven", stats)) {
namesFull <- c(namesFull, supportedStats$namesMagnif)
}
if (grepl("otherStat", stats)) {
namesFull <- c(namesFull, supportedStats$namesOtherStat)
}
if (grepl("magStat", stats)) {
namesFull <- c(namesFull, supportedStats$namesMagStat)
}
if (grepl("flowStat", stats)) {
namesFull <- c(namesFull, supportedStats$namesFlowStat)
}
if (grepl("durStat", stats)) {
namesFull <- c(namesFull, supportedStats$namesDurStat)
}
if (grepl("timStat", stats)) {
namesFull <- c(namesFull, supportedStats$namesTimStat)
}
if (grepl("rateStat", stats)) {
namesFull <- c(namesFull, supportedStats$namesRateStat)
}
namesFull <- c(namesFull, "comment")
length(namesFull)
colnames(statsout) <- namesFull
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/nameStatsArray.R', echo=TRUE)
statsout<-nameStatsArray(stats, sites, tempArrays)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/calculateStatsGroups.R', echo=TRUE)
sites <- '02177000,02178400'
startdate <- "2008-10-01"
enddate <- "2013-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat,otherStat"
nwisDvUrl <- "http://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites="
offering <- "00003"
property <- "00060"
drainage_url <- "http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
x_urls<-paste(nwisDvUrl, sites, "&startDT=", startdate, "&endDT=", enddate, "&statCd=", offering, "&parameterCd=", property, sep = "")
d_urls<-paste(drainage_url, sites, sep = "")
statsout <- calculateStatsGroups(stats, sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls)
sites<-"031401020800"
startdate <- "2008-10-01"
enddate <- "2010-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat"
sos<-"http://cida-eros-wsqa.er.usgs.gov:8081/thredds/sos/watersmart/HUC12_data/HUC12_Q.nc"
observedProperty="MEAN_streamflow"
wfsUrl<-'http://cida-eros-wsdev.er.usgs.gov:8081/geoserver/NWC/ows'
wfsTypename='NWC:huc12_SE_Basins_v2'
wfsFilterProperty='NWC:HUC12'
wfsAreaPropertyname='NWC:mi2'
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
urls<-paste(sos,'?request=GetObservation&service=SOS&version=1.0.0&observedProperty=',observedProperty,'&offering=',sites,sep="")
statsout <- calculateStatsGroups(stats, sites, startdate, enddate, SWE_CSV_IHA, urls, getWFSFieldAsNumeric, drain_args=list(wfs_url=wfsUrl, wfsTypename=wfsTypename, wfsProperty=wfsFilterProperty, wfsPropertyname=wfsAreaPropertyname), drain_site_param='wfsLiteral')
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
diffInputsv <- diffInputs(model_url)
startdate <- diffInputsv[[1]]
enddate <- diffInputsv[[2]]
x_urls <- diffInputsv[[3]]
d_urls <- diffInputsv[[4]]
m_urls <- diffInputsv[[5]]
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/calculateStatsDiffs.R', echo=TRUE)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
